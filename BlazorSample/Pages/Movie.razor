@page "/movie"
@page "/movie/{movieId}"
@using BlazorSample.Data.Utilities
@using Models = BlazorSample.Data.Models
@using Validators = BlazorSample.Data.Models.Validators

@inject BlazorSample.Data.IMoviesService MoviesService
@inject NavigationManager Navigation

<h3>Movie</h3>

<EditForm Model="@movie" OnValidSubmit="@HandleValidSubmit">
    <FluentValidationValidator ValidatorType=typeof(Validators.MovieValidator) />
    @*<ValidationSummary />*@
    <div class="form-group">
        <label for="Name">Name</label>
        <InputText @bind-Value=movie.Name class="form-control" id="Name" />
        <ValidationMessage For="() => movie.Name" />
    </div>
    <div class="form-group">
        <label for="ReleaseYear">Release Year</label>
        <InputNumber @bind-Value=movie.ReleaseYear class="form-control" id="ReleaseYear" />
        <ValidationMessage For="() => movie.ReleaseYear" />
    </div>
    <button type="submit">Submit</button>
</EditForm>

@code {
    [Parameter]
    public string MovieId { get; set; }

    private Models.Movie movie = new Models.Movie();

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(MovieId))
        {
            movie = new Models.Movie() { Id = Guid.NewGuid() };
        }
        else
        {
            movie = await MoviesService.GetMovie(Guid.Parse(MovieId));
        }
    }

    private async Task HandleValidSubmit(EditContext editContext)
    {
        var isValid = editContext.Validate();

        if (isValid)
        {
            if (string.IsNullOrEmpty(MovieId))
            {
                await MoviesService.AddMovie(movie);
                Navigation.NavigateTo("movies");
            }
            else
            {
                await MoviesService.UpdateMovie(movie);
                Navigation.NavigateTo("movies");
            }
        }
        else
        {
        }
    }
}
